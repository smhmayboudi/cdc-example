# yaml-language-server: $schema=https://raw.githubusercontent.com/compose-spec/compose-spec/master/schema/compose-spec.json

x-default-logging: &logging
  driver: json-file
  options:
    max-file: 2
    max-size: 5m

services:
  cockroach:
    command:
      - start-single-node
      - --accept-sql-without-tls
      - --http-addr=:8080
      - --insecure
      - --listen-addr=:26257
      - --store=attrs=ssd,path=/var/lib/cockroach/
    container_name: cockroach
    # depends_on: []
    # entrypoint: []
    # environment: []
    expose:
      - 8080 # Panel
      - 26257 # API
    extra_hosts:
      - host.docker.internal:host-gateway
    healthcheck:
      interval: 10s
      retries: 5
      start_period: 10s
      test: ["CMD-SHELL", "curl --fail http://cockroach:8080/health || exit 1"]
      timeout: 5s
    image: cockroachdb/cockroach:v23.1.13
    labels:
      namespace: cockroach
    logging: *logging
    # platform: linux/amd64
    ports:
      - "8080:8080"
      - "26257:26257"
    restart: "no"
    volumes:
      - cockroach:/var/lib/cockroach
    # working_dir: ""

  cockroach-migrate:
    command:
      - sql
      - --file=/init_schema.up.sql
      - --host=cockroach:26257
      - --insecure
    container_name: cockroach-migrate
    depends_on:
      cockroach:
        condition: service_healthy
    # entrypoint: []
    # environment: []
    # expose: []
    extra_hosts:
      - host.docker.internal:host-gateway
    # healthcheck: {}
    image: cockroachdb/cockroach:v23.1.13
    labels:
      namespace: cockroach-migrate
    logging: *logging
    # platform: linux/amd64
    # ports: []
    restart: "no"
    volumes:
      - ./db/init_schema.up.sql:/init_schema.up.sql:ro
    # working_dir: ""

  cockroach-migrate-cmd:
    # command: []
    container_name: cockroach-migrate-cmd
    depends_on:
      cockroach-migrate:
        condition: service_completed_successfully
    entrypoint:
      - /bin/sh
      - -c
      - -Eefuvx
      - >-
        ./cockroach-migrate.sh local cockroach:26257 cdc "" "" "" development
    # environment: []
    # expose: []
    extra_hosts:
      - host.docker.internal:host-gateway
    # healthcheck: {}
    image: migrate/migrate:v4.17.0
    labels:
      namespace: cockroach-migrate-cmd
    logging: *logging
    # platform: linux/amd64
    # ports: []
    restart: "no"
    volumes:
      - ./db/cdc/:/db/cdc/:ro
      - ./script/cockroach-migrate.sh:/cockroach-migrate.sh:ro
    # working_dir: ""

  debezium-connect:
    # command: []
    container_name: debezium-connect
    depends_on:
      redpanda-cmd:
        condition: service_completed_successfully
      redpanda-console:
        condition: service_healthy
    # entrypoint: []
    environment:
      BOOTSTRAP_SERVERS: redpanda:9092
      # CONFIG_STORAGE_REPLICATION_FACTOR: "1"
      CONFIG_STORAGE_TOPIC: inventory.configs
      GROUP_ID: "1"
      # KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
      # OFFSET_STORAGE_REPLICATION_FACTOR: "1"
      OFFSET_STORAGE_TOPIC: inventory.offset
      # PLUGIN_PATH: /data/connect-jars
      # REST_ADVERTISED_HOST_NAME: kafka-connect-rest
      # STATUS_STORAGE_REPLICATION_FACTOR: "1"
      STATUS_STORAGE_TOPIC: inventory.status
      # VALUE_CONVERTER: org.apache.kafka.connect.storage.StringConverter
    expose:
      - 8083
    extra_hosts:
      - host.docker.internal:host-gateway
    healthcheck:
      interval: 10s
      retries: 5
      start_period: 10s
      test: ["CMD-SHELL", "curl --fail http://debezium-connect:8083 || exit 1"]
      timeout: 5s
    image: debezium/connect:2.5.0.Final
    labels:
      namespace: debezium-connect
    logging: *logging
    # platform: linux/amd64
    ports:
      - "8083:8083"
    restart: "no"
    volumes:
      - ./.docker/debezium-connect/config.yaml:/etc/debezium-connect/config.yaml:ro
    # working_dir: ""

  # read more https://docs.redpanda.com/current/reference/docker-compose/
  redpanda:
    command:
      - redpanda
      - start
      - --advertise-kafka-addr=internal://redpanda:9092,external://localhost:19092
      - --advertise-pandaproxy-addr=internal://redpanda:8082,external://localhost:18082
      - --advertise-rpc-addr=redpanda:33145
      # - --config=/etc/redpanda/config.yaml
      - --kafka-addr=internal://0.0.0.0:9092,external://0.0.0.0:19092
      - --mode=dev-container
      - --overprovisioned
      - --pandaproxy-addr=internal://0.0.0.0:8082,external://0.0.0.0:18082
      - --rpc-addr=redpanda:33145
      - --schema-registry-addr=internal://0.0.0.0:8081,external://0.0.0.0:18081
      - --smp=1
      - --check=false
      - --memory=1G
      - --node-id=0
      - --reserve-memory=0M
    container_name: redpanda
    # depends_on: []
    # entrypoint: []
    # environment: []
    expose:
      - 8081 # Schema Registry API
      - 8082 # Panda Proxy API
      - 9092 # Kafka API
      - 9644 # Admin API
    extra_hosts:
      - host.docker.internal:host-gateway
    healthcheck:
      interval: 10s
      retries: 5
      start_period: 10s
      test: ["CMD-SHELL", "curl --fail http://redpanda:18081/schemas/types || exit 1"]
      timeout: 5s
    image: redpandadata/redpanda:v23.3.4
    labels:
      namespace: redpanda
    logging: *logging
    # platform: linux/amd64
    ports:
      - "18081:18081"
      - "18082:18082"
      - "19092:19092"
      - "19644:9644"
    restart: "no"
    volumes:
      - ./.docker/redpanda/config.yaml:/etc/redpanda/config.yaml:ro
      - redpanda:/var/lib/redpanda/data
    # working_dir: ""

  redpanda-cmd:
    command:
      - topic
      - create
      - cdc
      - --brokers=redpanda:9092
    # cluster config set auto_create_topics_enabled true
    container_name: redpanda-cmd
    depends_on:
      redpanda:
        condition: service_healthy
    # entrypoint: []
    # environment: []
    expose:
      - 8081 # Schema Registry API
      - 8082 # Panda Proxy API
      - 9092 # Kafka API
      - 9644 # Admin API
    extra_hosts:
      - host.docker.internal:host-gateway
    image: redpandadata/redpanda:v23.3.4
    labels:
      namespace: redpanda-cmd
    logging: *logging
    # platform: linux/amd64
    # ports: []
    restart: "no"
    # volumes: []
    # working_dir: ""

  # redpanda-connectors:
  #   # command: []
  #   container_name: redpanda-connectors
  #   depends_on:
  #     redpanda:
  #       condition: service_healthy
  #   # entrypoint: []
  #   environment:
  #     CONNECT_BOOTSTRAP_SERVERS: redpanda:9092
  #     CONNECT_CONFIGURATION: |
  #         config.storage.replication.factor=-1
  #         config.storage.topic=_internal_connectors_configs
  #         group.id=connectors-cluster
  #         key.converter=org.apache.kafka.connect.converters.ByteArrayConverter
  #         offset.flush.interval.ms=1000
  #         offset.storage.replication.factor=-1
  #         offset.storage.topic=_internal_connectors_offsets
  #         producer.batch.size=131072
  #         producer.linger.ms=50
  #         status.storage.replication.factor=-1
  #         status.storage.topic=_internal_connectors_status
  #         value.converter=org.apache.kafka.connect.converters.ByteArrayConverter
  #     CONNECT_GC_LOG_ENABLED: "false"
  #     CONNECT_HEAP_OPTS: -Xms512M -Xmx512M
  #     CONNECT_LOG_LEVEL: info
  #   expose:
  #     - 8083
  #   extra_hosts:
  #     - host.docker.internal:host-gateway
  #   healthcheck:
  #     interval: 10s
  #     retries: 5
  #     start_period: 10s
  #     test: ["CMD-SHELL", "curl --fail http://redpanda-connectors:8083 || exit 1"]
  #     timeout: 5s
  #   image: redpandadata/connectors:v1.0.15
  #   labels:
  #     namespace: redpanda-connectors
  #   logging: *logging
  #   # platform: linux/amd64
  #   ports:
  #     - "8083:8083"
  #   restart: "no"
  #   volumes:
  #     - ./.docker/redpanda-connectors/config.yaml:/etc/redpanda-connectors/config.yaml:ro
  #   # working_dir: ""

  redpanda-console:
    # command: []
    container_name: redpanda-console
    depends_on:
      redpanda:
        condition: service_healthy
    # entrypoint: []
    environment:
      - CONFIG_FILEPATH=${CONFIG_FILEPATH:-/etc/redpanda-console/config.yaml}
    expose:
      - 8080
    extra_hosts:
      - host.docker.internal:host-gateway
    healthcheck:
      interval: 10s
      retries: 5
      start_period: 10s
      test:
        [
          "CMD-SHELL",
          "wget --no-verbose --tries=1 --spider http://redpanda-console:8080 || exit 1",
        ]
      timeout: 5s
    image: redpandadata/console:v2.4.0
    labels:
      namespace: redpanda-console
    logging: *logging
    # platform: linux/amd64
    ports:
      - "8081:8080"
    restart: "no"
    volumes:
      - ./.docker/redpanda-console/config.yaml:/etc/redpanda-console/config.yaml:ro
    # working_dir: ""

version: "3.9"
volumes:
  cockroach: {}
  # cockroach-migrate: {}
  # cockroach-migrate-cmd: {}
  # debezium-connect: {}
  redpanda: {}
  # redpanda-cmd: {}
  # redpanda-connectors: {}
  # redpanda-console: {}
